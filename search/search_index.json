{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to DRAFT","text":"<p>DRAFT (Deep Research Agent Framework Toolkit) is a multi-agent research framework that uses AI agents to plan, search, synthesize, and critique to produce high-quality research answers with live progress and observability.</p> <p>This documentation provides a comprehensive guide to understanding, using, and extending the DRAFT framework.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Modular Multi-Agent System: Specialized agents for planning, searching, synthesizing, and critiquing.</li> <li>Extensible and Composable: Easily create new agents and tools to extend the framework's capabilities.</li> <li>Live Progress and Observability: Monitor the research process in real-time with Langfuse tracing.</li> <li>Multi-Source Knowledge Retrieval: Integrates with various knowledge sources like Weaviate, Perplexity, and Tavily.</li> <li>Conversation History: Persistently stores and retrieves past conversations for context-aware research.</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"<p>To get started with DRAFT, check out the following sections:</p> <ul> <li>Architecture: Learn about the modular design of the framework.</li> <li>Creating Your Own Agent: A step-by-step guide to creating your own agents using simple YAML configuration.</li> <li>Contributing: Find out how you can contribute to the DRAFT project.</li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>The DRAFT framework is designed to be modular and extensible, allowing for the easy composition of AI agents to perform complex research tasks. The architecture is centered around a multi-agent system where each agent has a specialized role.</p>"},{"location":"architecture/#multi-agent-system","title":"Multi-Agent System","text":"<p>The core of DRAFT is its multi-agent system, which is highly configurable. DRAFT supports multiple configurations of the multi-agent system, each designed for different research strategies or domains. You can select which \"Main\" agent configuration is active via <code>configs/config.yaml</code>.</p> <p>Each multi-agent system configuration typically consists of a \"Main\" orchestrator agent and a set of specialized sub-agents. For example, a common configuration includes:</p> <ul> <li>Planner: This agent is responsible for creating a structured research plan based on the user's query. It breaks down the research task into smaller, manageable steps.</li> <li>Search: The search agent executes the research plan by querying various knowledge sources and tools. It can interact with knowledge bases like Weaviate, and web search services like Perplexity and Tavily.</li> <li>Synthesizer: This agent takes the evidence gathered by the search agent and synthesizes it into a comprehensive and coherent answer.</li> <li>Critic: The critic agent evaluates the quality of the synthesized answer and provides feedback for improvement. This iterative process ensures the final output is of high quality.</li> </ul>"},{"location":"architecture/#key-components","title":"Key Components","text":"<p>DRAFT is built upon a set of key components that provide the foundation for its functionality:</p> <ul> <li>Agent Framework: We use the OpenAI Agents SDK as the backbone of our agent framework, with custom output types to handle structured data.</li> <li>Knowledge Base: DRAFT uses Weaviate as its default vector database for knowledge storage and retrieval.</li> <li>Web Search: The framework integrates with Perplexity API and Tavily for real-time web search capabilities.</li> <li>MCP Integration: DRAFT supports external capability servers through the Multi-Agent Capability Protocol (MCP). This allows for the integration of external tools and services.</li> <li>Observability: We use Langfuse for tracing and observability, providing real-time insights into the agent's operations.</li> <li>GUI: A Gradio-based web interface is provided for easy interaction with the framework.</li> </ul>"},{"location":"architecture/#agent-orchestration","title":"Agent Orchestration","text":"<p>DRAFT supports two modes of agent orchestration:</p> <ul> <li><code>agent</code> mode (default): In this mode, a single orchestrator agent manages the entire research process with streaming updates.</li> <li><code>sequential</code> mode: This mode follows a more explicit workflow of plan \u2192 search \u2192 synthesize \u2192 critique, with a configurable number of revision iterations. (DRAFT agent only. We are planning to deprecate this mode in the future.)</li> </ul> <p>This modular architecture allows for the flexible composition of agents and tools, making it easy to extend and adapt the framework to different research needs.</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome contributions to the DRAFT framework! Whether you want to fix a bug, add a new feature, or improve the documentation, your help is greatly appreciated.</p>"},{"location":"contributing/#how-to-contribute","title":"How to Contribute","text":"<p>To contribute to the project, please follow these steps:</p> <ol> <li>Fork the repository: Create your own fork of the DRAFT repository on GitHub.</li> <li>Create a new branch: Create a new branch in your forked repository for your changes.</li> <li>Make your changes: Make your desired changes to the codebase.</li> <li>Run the tests: Ensure that all tests pass by running <code>PYTHONPATH=. uv run --env-file .env pytest</code>.</li> <li>Submit a pull request: Open a pull request from your branch to the <code>main</code> branch of the DRAFT repository.</li> </ol>"},{"location":"contributing/#development-setup","title":"Development Setup","text":"<p>For a detailed guide on setting up your development environment, please refer to the Installation section in the <code>README.md</code> file.</p>"},{"location":"contributing/#formatting-and-linting","title":"Formatting and Linting","text":"<p>We use <code>ruff</code> for formatting and linting the code. Before submitting your changes, please make sure to run the following commands:</p> <ul> <li>Format: <code>uv run ruff format .</code></li> <li>Lint: <code>uv run ruff check .</code></li> </ul>"},{"location":"contributing/#pre-commit-hooks","title":"Pre-commit Hooks","text":"<p>We use pre-commit hooks to ensure that the code is properly formatted and linted before each commit. To install the pre-commit hooks, run:</p> <pre><code>uv run pre-commit install\n</code></pre>"},{"location":"contributing/#adding-new-agents-and-tools","title":"Adding New Agents and Tools","text":"<p>For instructions on how to add new agents and tools to the framework, please refer to the following guides:</p> <ul> <li>Creating Your Own Agent</li> <li>Adding New Tools</li> </ul> <p>Thank you for your contributions!</p>"},{"location":"creating-agents/","title":"Creating Your Own Agent","text":"<p>One of the key features of the DRAFT framework is the ability to easily create and integrate your own custom agents. This guide will walk you through the process of creating a new agent using a simple YAML configuration.</p>"},{"location":"creating-agents/#1-create-a-configuration-file","title":"1. Create a Configuration File","text":"<p>The first step is to create a new YAML configuration file for your agent in the <code>configs/agents/{your_agent_name}</code> directory. For example, let's create a new agent called <code>my_agent</code>:</p> <pre><code># configs/agents/my_agent/main.yaml\n\ndefaults:\n  - ../mcp_servers/tavily_search@configs.mcp_servers  # Optional, specify the MCP server to use\n  - _self_\n\nname: \"Main\"\ndescription: \"This is my custom agent.\"\nconfigs:\n  model: \"gemini-1.5-pro-latest\"\n  prompt: prompts/my_agent/main.txt  # This can be both a file path or a string\n  function_tools:  # Optional. Function tools are defined at src/draft_agents/function_tools/__init__.py\n    - perplexity_search\n</code></pre> <p>In this configuration, you define the main agent's name, description, LLM settings and prompt file. You can also specify any sub-agents by adding additional configuration files in the same directory (e.g., <code>configs/agents/my_agent/my_sub_agent.yaml</code>).</p>"},{"location":"creating-agents/#2-organize-prompt-files","title":"2. Organize Prompt Files","text":"<p>Next, create a new directory for your main agent's prompt files under <code>prompts/</code> (e.g., <code>prompts/my_agent/</code>). This directory will contain the prompt files for your main agent and any sub-agents within that configuration.</p> <p>For our example, we'll create <code>prompts/my_agent/main.txt</code>:</p> <pre><code>You are the main orchestrator for the 'My Agent' configuration. Your task is to...\n</code></pre> <p>This file contains the prompt that will be used to instruct your main agent on its task. Similarly, you would create prompt files for any sub-agents (e.g., <code>prompts/my_agent/my_sub_agent.txt</code>).</p>"},{"location":"creating-agents/#3-define-an-output-type-optional","title":"3. Define an Output Type (Optional)","text":"<p>The output type of an agent is determined automatically based on the agent's <code>name</code> field in its configuration. The framework looks for a Pydantic model in <code>src/draft_agents/output_types/</code> with a class name that matches the agent's <code>name</code>.</p> <p>Important: The <code>name</code> field in your agent's YAML configuration must exactly match the PascalCase class name of the Pydantic model defined in <code>src/draft_agents/output_types/__init__.py</code>. If a matching Pydantic model is not found, or if the names do not match, the agent's output type will default to <code>str</code>.</p> <p>To define a custom output type, you need to:</p> <ol> <li> <p>Create a Pydantic model in a new Python file in <code>src/draft_agents/output_types/</code>. For example, if your agent's <code>name</code> is <code>MyAgent</code>, create <code>src/draft_agents/output_types/my_agent.py</code>:</p> <pre><code>from pydantic import BaseModel, Field\n\nclass MyAgentOutput(BaseModel):\n    result: str = Field(description=\"The result of the agent's task.\")\n</code></pre> </li> <li> <p>Import the new model in <code>src/draft_agents/output_types/__init__.py</code>:</p> <pre><code># src/draft_agents/output_types/__init__.py\n\nfrom src.draft_agents.output_types.critic import CriticFeedback\nfrom src.draft_agents.output_types.evaluator import EvaluatorFeedback\nfrom src.draft_agents.output_types.planner import SearchItem, SearchPlan\nfrom src.draft_agents.output_types.my_agent import MyAgentOutput # Add this line\n\noutput_types = {\n    \"Planner\": SearchPlan,\n    \"Critic\": CriticFeedback,\n    \"Evaluator\": EvaluatorFeedback,\n    \"MyAgent\": MyAgentOutput,  # Add your new agent here, ensuring name matches\n}\n</code></pre> </li> </ol> <p>Now, when you run your agent, the framework will automatically use the specified Pydantic model as the output type, provided the names match.</p>"},{"location":"creating-agents/#4-activate-your-main-agent-configuration","title":"4. Activate Your Main Agent Configuration","text":"<p>To use your newly created main agent configuration, you need to activate it in the <code>configs/config.yaml</code> file. This file acts as the central configuration for the entire framework.</p> <p>Locate the <code>defaults</code> section in <code>configs/config.yaml</code> and modify the entry for the main agent to point to your new main agent's <code>main.yaml</code> file. For example:</p> <pre><code># configs/config.yaml\n\ndefaults:\n  # - agents/draft_agent/main@agents.Main # Comment out or remove the previous main agent\n  - agents/my_agent/main@agents.Main # Uncomment or add your new main agent here\n  # ... other defaults ...\n</code></pre> <p>By changing this line, you tell the framework to load and use the <code>main.yaml</code> from your <code>my_agent</code> directory as the primary orchestrator. You can easily switch between different main agent configurations by modifying this single line.</p> <p>And that's it! You have successfully created and integrated your own custom main agent configuration into the DRAFT framework.</p>"}]}